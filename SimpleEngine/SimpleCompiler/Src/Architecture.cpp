// 语义分析
// 程序语句大体分为两类: 声明语句, 可执行语句

// 声明语句用于收集标识符( 所声明的数据对象或过程的名字, Name )的属性信息 =>
// Kind: 简单变量, 复合变量( 数组 ), 过程...
// Type: 整型, 字符型, 布尔型, 指针型...
// Address, 长度: 程序中声明的数据对象和过程, 都要在内存中为它分配一块存储空间
// Value
// 作用域
// 对于过程来说, 还有参数和返回值信息

// 语义分析阶段收集的这些标识符的属性信息, 都会存放在一个称谓符号表( Symbol Table )的数据结构中
// 每一个标识符都对应着符号表中的一条记录
// 记录的每一个字段对应着标识符的一个属性
// 符号表通常会带有一个字符串表, 专门用来存放程序中用到的标识符和字符常量
// 而符号表自身的 Name 字段就被分割成两个部分: 第一个部分用来存放标识符在字符串表中的起始位置, 另一部分用来存放标识符的长度

// 语义检查 =>
// 变量或过程未经声明就使用
// 变量或过程名重复声明
// ...


// 中间代码生成
// 中间表示可以有多种形式: Three-address Code, Syntax Trees
// Three-address Code 由类似于汇编语言的指令序列组成, 每个指令最多有三个操作数


// 目标代码生成
// 以源程序的中间表示形式作为输入, 并把它映射到目标语言
// 目标代码生成的一个重要任务就是为程序中使用的变量合理地分配寄存器


// 代码优化分为两个阶段 =>
// 机器无关优化: 在中间代码层面进行优化
// 机器相关优化: 在目标代码层面进行优化